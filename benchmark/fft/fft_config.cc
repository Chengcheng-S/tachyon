#include "benchmark/fft/fft_config.h"

#include <string>

#include "tachyon/base/console/iostream.h"
#include "tachyon/base/containers/container_util.h"
#include "tachyon/base/flag/flag_parser.h"
#include "tachyon/base/ranges/algorithm.h"

namespace tachyon {

bool FFTConfig::Parse(int argc, char** argv) {
  base::FlagParser parser;
  // clang-format off
  parser.AddFlag<base::Flag<std::vector<uint64_t>>>(&exponents_)
      .set_short_name("-k")
      .set_required()
      .set_help("Specify the exponent 'k's where the degree of poly to test is 2·µè.");
  // clang-format on
  parser.AddFlag<base::BoolFlag>(&run_ifft_)
      .set_long_name("--run_ifft")
      .set_help("Run IFFT benchmark. Default is FFT benchmark.");
  parser.AddFlag<base::BoolFlag>(&check_results_)
      .set_long_name("--check_results")
      .set_help("Whether checks results generated by each fft runner.");
  {
    std::string error;
    if (!parser.Parse(argc, argv, &error)) {
      tachyon_cerr << error << std::endl;
      return false;
    }
  }

  base::ranges::sort(exponents_);  // NOLINT
  return true;
}

std::vector<uint64_t> FFTConfig::GetDegrees() const {
  return base::Map(exponents_,
                   [](uint64_t exponent) { return uint64_t{1} << exponent; });
}

}  // namespace tachyon
